import pandas as pd 
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly
import plotly.express as px
import plotly.offline as pyo
from plotly.offline import init_notebook_mode,plot,iplot
import cufflinks as cf


pyo.init_notebook_mode(connected=True)
cf.go_offline()

df = pd.read_csv('heart_prediction.csv')
df.head()

df.info()

info = ["age","1: male, 0: female","chest pain type, 1: typical angina, 2: atypical angina, 3: non-anginal pain, 4: asymptomatic","resting blood pressure"," serum cholestoral in mg/dl","fasting blood sugar > 120 mg/dl","resting electrocardiographic results (values 0,1,2)"," maximum heart rate achieved","exercise induced angina","oldpeak = ST depression induced by exercise relative to rest","the slope of the peak exercise ST segment","number of major vessels (0-3) colored by flourosopy","thal: 3 = normal; 6 = fixed defect; 7 = reversable defect"]

for i in range (len(info)):
  print(df.columns[i]+"\t"+info[i])

df.target

df['target']

df.groupby('target').sum()

df.groupby('target').size()

df.shape

df.size

df.describe()

df['target'].unique()

df.hist(figsize=(14,12))
plt.show()

plt.bar(x=df['sex'],height=df['age'])
plt.show()

sns.barplot(x="fbs", y="target", data=df)
plt.show()



sns.barplot(x=df['sex'],y=df['age'],hue=df['target'])

sns.barplot(df["cp"],df['target'])

sns.barplot(df["sex"],df['target'])

px.bar(df,df['sex'],df['target'])
sns.distplot(df["thal"])



sns.distplot(df["chol"])

sns.pairplot(df,hue='target')

df

numeric_columns=['trestbps','chol','thalach','age','oldpeak']






sns.pairplot(df[numeric_columns])



df['target']

y = df["target"]
sns.countplot(y)
target_temp = df.target.value_counts()
print(target_temp)

sns.heatmap(df[numeric_columns].corr(),annot=True, cmap='viridis', linewidths=0.1)
fig=plt.gcf()
fig.set_size_inches(8,8)
plt.show()

plt.figure(figsize=(12,12))
plt.subplot(221)
sns.distplot(df[df['target']==0].age)
plt.title('Age of patients without heart disease')
plt.subplot(222)
sns.distplot(df[df['target']==1].age)
plt.title('Age of patients with heart disease')
plt.show()

plt.figure(figsize=(12,12))
plt.subplot(223)
sns.distplot(df[df['target']==0].thalach )
plt.title('Max heart rate of patients without heart disease')
plt.subplot(224)
sns.distplot(df[df['target']==1].thalach )
plt.title('Max heart rate of patients with heart disease')
plt.show()

plt.figure(figsize=(13,10))
plt.subplot(121)
sns.violinplot(x="target", y="thalach", data=df, inner=None)
sns.swarmplot(x="target", y="thalach", data=df, color='r', alpha=0.5)
plt.show()

plt.figure(figsize=(13,10))
plt.subplot(122)
sns.swarmplot(x="target", y="thalach", data=df)
plt.show()

plt.figure(figsize=(16,8))
plt.subplot(131)
sns.pointplot(x="sex", y="target", hue='cp', data=df)
plt.legend(['male = 1', 'female = 0'])
plt.show()



plt.figure(figsize=(16,8))
plt.subplot(132)
sns.barplot(x="exang", y="target", data=df)
plt.legend(['yes = 1', 'no = 0'])
plt.show()

plt.figure(figsize=(16,8))
plt.subplot(133)
sns.countplot(x="slope", hue='target', data=df)
plt.show()

#DATA PREPROCESSING

df['target'].value_counts()

df['target'].isnull()

df['target'].sum()



df['target'].unique()

df.isnull().sum()

#STORING - X and y
X,y=df.loc[:,:'thal'],df.loc[:,'target']



X

y

X.shape

y.shape

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler


X=df.drop(['target'],axis=1)

np.array(X)

X

X_train,X_test,y_train,y_test=train_test_split(X,y,random_state=10,test_size=0.2,shuffle=True)

X_test

y_test

X_train.shape

X_test.shape

y_train.shape

y_test.shape

from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

dt=DecisionTreeClassifier()
dt.fit(X_train,y_train)

y_prediction=dt.predict(X_test)



accuracy_dt=accuracy_score (y_test,y_prediction)
accuracy_dt

dt.score(X_train, y_train)

dt.score(X_test, y_test)

y_test

y_prediction

X_DT=np.array([[63 ,1, 3,145,233,1,0,150,0,2.3,0,0,1]])
X_DT_prediction=dt.predict(X_DT)


X_DT_prediction[0]

dt.feature_importances_

def plot_feature_importances_diabetes(model):
    plt.figure(figsize=(8,6))
    n_features = 13
    plt.barh(range(n_features), model.feature_importances_, align='center')
    plt.yticks(np.arange(n_features), X)
    plt.xlabel("FEATURE IMPORTANCES")
    plt.ylabel("FEATURE")
    plt.ylim(-1, n_features)
plot_feature_importances_diabetes(dt)
plt.savefig('feature_importance')

sc=StandardScaler().fit(X_train)
X_train_std=sc.transform(X_train)
X_test_std=sc.transform(X_test)


X_test_std

from sklearn.neighbors import KNeighborsClassifier

knn=KNeighborsClassifier(n_neighbors=4)
knn.fit(X_train_std,y_train)

prediction_knn=knn.predict(X_test_std)
accuracy_knn=accuracy_score(y_test,prediction_knn)

accuracy_knn

knn.score(X_train, y_train)

knn.score(X_test, y_test)

k_range=range(1,26)
scores={}
scores_list=[]

for k in k_range:
    knn=KNeighborsClassifier(n_neighbors=k)
    knn.fit(X_train_std,y_train)
    prediction_knn=knn.predict(X_test_std)
    scores[k]=accuracy_score(y_test,prediction_knn)
    scores_list.append(accuracy_score(y_test,prediction_knn))

scores

plt.plot(k_range,scores_list)

X_knn=np.array([[63 ,1, 3,145,233,1,0,150,0,2.3,0,0,1]])
X_knn_std=sc.transform(X_knn)
X_knn_prediction=dt.predict(X_knn)


X_knn_std

(X_knn_prediction[0])

algorithms=['Decision Tree','KNN']
scores=[accuracy_dt,accuracy_knn]


sns.set(rc={'figure.figsize':(10,7)})
plt.xlabel("Algorithms")
plt.ylabel("Accuracy score")

sns.barplot(algorithms,scores)