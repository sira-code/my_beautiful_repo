
Code cell <pMGp3WWUSXMQ>
#%% [code]
outbreak_deaths = pd.read_csv('outbreak_deaths.csv')

Code cell <f4VQ-FlNSjuz>
#%% [code]
outbreak_recovered = pd.read_csv('outbreak_recovered.csv')

Code cell <FwzLN4rKS85q>
#%% [code]
outbreak_confirmed.head(15)
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		Province/State       Country/Region  ...  6/17/20  6/18/20
		0                            NaN          Afghanistan  ...    26874    27532
		1                            NaN              Albania  ...     1722     1788
		2                            NaN              Algeria  ...    11268    11385
		3                            NaN              Andorra  ...      854      855
		4                            NaN               Angola  ...      155      166
		5                            NaN  Antigua and Barbuda  ...       26       26
		6                            NaN            Argentina  ...    35552    37510
		7                            NaN              Armenia  ...    18033    18698
		8   Australian Capital Territory            Australia  ...      108      108
		9                New South Wales            Australia  ...     3137     3143
		10            Northern Territory            Australia  ...       29       29
		11                    Queensland            Australia  ...     1066     1066
		12               South Australia            Australia  ...      440      440
		13                      Tasmania            Australia  ...      228      228
		14                      Victoria            Australia  ...     1780     1792
		
		[15 rows x 153 columns]

Code cell <vtgRCwu7Tepu>
#%% [code]
outbreak_deaths.head()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		Province/State Country/Region      Lat  ...  6/16/20  6/17/20  6/18/20
		0            NaN    Afghanistan  33.0000  ...      491      504      546
		1            NaN        Albania  41.1533  ...       37       38       39
		2            NaN        Algeria  28.0339  ...      788      799      811
		3            NaN        Andorra  42.5063  ...       52       52       52
		4            NaN         Angola -11.2027  ...        6        7        8
		
		[5 rows x 153 columns]

Code cell <5ymE9yiLTq2F>
#%% [code]
outbreak_recovered.head()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		Province/State Country/Region      Lat  ...  6/16/20  6/17/20  6/18/20
		0            NaN    Afghanistan  33.0000  ...     5508     6158     7660
		1            NaN        Albania  41.1533  ...     1064     1077     1086
		2            NaN        Algeria  28.0339  ...     7842     7943     8078
		3            NaN        Andorra  42.5063  ...      789      791      792
		4            NaN         Angola -11.2027  ...       64       64       64
		
		[5 rows x 153 columns]

Code cell <0lGSiEewTz0T>
#%% [code]
cols = outbreak_confirmed.keys()
cols
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		Index(['Province/State', 'Country/Region', 'Lat', 'Long', '1/22/20', '1/23/20',
		       '1/24/20', '1/25/20', '1/26/20', '1/27/20',
		       ...
		       '6/9/20', '6/10/20', '6/11/20', '6/12/20', '6/13/20', '6/14/20',
		       '6/15/20', '6/16/20', '6/17/20', '6/18/20'],
		      dtype='object', length=153)

Code cell <0ooJ4QsrURa4>
#%% [code]
confirmed = outbreak_confirmed.loc[:,cols[4]:cols[-1]]

Code cell <Id7BNZTiUuMo>
#%% [code]
deaths  = outbreak_deaths.loc[:,cols[4]:cols[-1]]

Code cell <u9IixEDDU60->
#%% [code]
recoveries = outbreak_recovered.loc[:,cols[4]:cols[-1]]

Code cell <mNQmVdneVGaA>
#%% [code]
confirmed.head()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		1/22/20  1/23/20  1/24/20  1/25/20  ...  6/15/20  6/16/20  6/17/20  6/18/20
		0        0        0        0        0  ...    25527    26310    26874    27532
		1        0        0        0        0  ...     1590     1672     1722     1788
		2        0        0        0        0  ...    11031    11147    11268    11385
		3        0        0        0        0  ...      853      854      854      855
		4        0        0        0        0  ...      142      148      155      166
		
		[5 rows x 149 columns]

Code cell <lNRBeobyVcbG>
#%% [code]
deaths.head()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		1/22/20  1/23/20  1/24/20  1/25/20  ...  6/15/20  6/16/20  6/17/20  6/18/20
		0        0        0        0        0  ...      478      491      504      546
		1        0        0        0        0  ...       36       37       38       39
		2        0        0        0        0  ...      777      788      799      811
		3        0        0        0        0  ...       51       52       52       52
		4        0        0        0        0  ...        6        6        7        8
		
		[5 rows x 149 columns]

Code cell <eoCytliOVjxI>
#%% [code]
recoveries.head()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		1/22/20  1/23/20  1/24/20  1/25/20  ...  6/15/20  6/16/20  6/17/20  6/18/20
		0        0        0        0        0  ...     5164     5508     6158     7660
		1        0        0        0        0  ...     1055     1064     1077     1086
		2        0        0        0        0  ...     7735     7842     7943     8078
		3        0        0        0        0  ...      789      789      791      792
		4        0        0        0        0  ...       64       64       64       64
		
		[5 rows x 149 columns]

Code cell <Er_iv2N3Vsha>
#%% [code]
dates = confirmed.keys()
world_cases = []
total_deaths = []
mortality_rate = []
total_recovered = []

for i in dates:
  confirmed_sum = confirmed[i].sum()
  death_sum = deaths[i].sum()
  recovered_sum = recoveries[i].sum()
  world_cases.append(confirmed_sum)
  total_deaths.append(death_sum)
  mortality_rate.append(death_sum/confirmed_sum)
  total_recovered.append(recovered_sum)

Code cell <NUI-upALXyi3>
#%% [code]
confirmed_sum
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		8488976

Code cell <cOo30CpTYBZe>
#%% [code]
death_sum
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		453981

Code cell <_3zb7W1KYEux>
#%% [code]
recovered_sum
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		4155099

Code cell <Ko4UPEqRa5pt>
#%% [code]
world_cases
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		[555,
		 654,
		 941,
		 1434,
		 2118,
		 2927,
		 5578,
		 6166,
		 8234,
		 9927,
		 12038,
		 16787,
		 19881,
		 23892,
		 27635,
		 30794,
		 34391,
		 37120,
		 40150,
		 42762,
		 44802,
		 45221,
		 60368,
		 66885,
		 69030,
		 71224,
		 73258,
		 75136,
		 75639,
		 76197,
		 76819,
		 78572,
		 78958,
		 79525,
		 80372,
		 81346,
		 82704,
		 84070,
		 85967,
		 88325,
		 90262,
		 92795,
		 95075,
		 97844,
		 101761,
		 105782,
		 109754,
		 113536,
		 118375,
		 125704,
		 130909,
		 145204,
		 156283,
		 167022,
		 181452,
		 196917,
		 216161,
		 243084,
		 272698,
		 304844,
		 337597,
		 378381,
		 418569,
		 468155,
		 530138,
		 594178,
		 661544,
		 720695,
		 783580,
		 858317,
		 933905,
		 1014713,
		 1097193,
		 1177447,
		 1251123,
		 1322598,
		 1397537,
		 1481490,
		 1567423,
		 1659674,
		 1737813,
		 1836615,
		 1906692,
		 1977287,
		 2057584,
		 2153578,
		 2242537,
		 2316073,
		 2398423,
		 2472264,
		 2546905,
		 2622750,
		 2711635,
		 2799064,
		 2884420,
		 2958352,
		 3027215,
		 3101078,
		 3176596,
		 3261450,
		 3349915,
		 3432050,
		 3511157,
		 3587874,
		 3668635,
		 3760836,
		 3851895,
		 3945002,
		 4030363,
		 4108270,
		 4184838,
		 4268247,
		 4353211,
		 4451126,
		 4548549,
		 4641727,
		 4721968,
		 4810315,
		 4906193,
		 5005761,
		 5112366,
		 5220585,
		 5321022,
		 5417354,
		 5504324,
		 5599216,
		 5702113,
		 5820253,
		 5941938,
		 6070884,
		 6178860,
		 6275246,
		 6387849,
		 6519164,
		 6642853,
		 6776126,
		 6902650,
		 7015739,
		 7119355,
		 7242692,
		 7376333,
		 7514724,
		 7644260,
		 7778881,
		 7912426,
		 8034461,
		 8173940,
		 8349950,
		 8488976]

Code cell <fEe58FUebI_s>
#%% [code]
days_since_1_22 = np.array([i for i in range (len(dates))]).reshape(-1,1)
world_cases = np.array(world_cases).reshape(-1,1)
total_deaths = np.array(total_deaths).reshape(-1,1)
total_recovered = np.array(total_recovered).reshape(-1,1)

Code cell <zIHtP2bTctFP>
#%% [code]
days_since_1_22
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		array([[  0],
		       [  1],
		       [  2],
		       [  3],
		       [  4],
		       [  5],
		       [  6],
		       [  7],
		       [  8],
		       [  9],
		       [ 10],
		       [ 11],
		       [ 12],
		       [ 13],
		       [ 14],
		       [ 15],
		       [ 16],
		       [ 17],
		       [ 18],
		       [ 19],
		       [ 20],
		       [ 21],
		       [ 22],
		       [ 23],
		       [ 24],
		       [ 25],
		       [ 26],
		       [ 27],
		       [ 28],
		       [ 29],
		       [ 30],
		       [ 31],
		       [ 32],
		       [ 33],
		       [ 34],
		       [ 35],
		       [ 36],
		       [ 37],
		       [ 38],
		       [ 39],
		       [ 40],
		       [ 41],
		       [ 42],
		       [ 43],
		       [ 44],
		       [ 45],
		       [ 46],
		       [ 47],
		       [ 48],
		       [ 49],
		       [ 50],
		       [ 51],
		       [ 52],
		       [ 53],
		       [ 54],
		       [ 55],
		       [ 56],
		       [ 57],
		       [ 58],
		       [ 59],
		       [ 60],
		       [ 61],
		       [ 62],
		       [ 63],
		       [ 64],
		       [ 65],
		       [ 66],
		       [ 67],
		       [ 68],
		       [ 69],
		       [ 70],
		       [ 71],
		       [ 72],
		       [ 73],
		       [ 74],
		       [ 75],
		       [ 76],
		       [ 77],
		       [ 78],
		       [ 79],
		       [ 80],
		       [ 81],
		       [ 82],
		       [ 83],
		       [ 84],
		       [ 85],
		       [ 86],
		       [ 87],
		       [ 88],
		       [ 89],
		       [ 90],
		       [ 91],
		       [ 92],
		       [ 93],
		       [ 94],
		       [ 95],
		       [ 96],
		       [ 97],
		       [ 98],
		       [ 99],
		       [100],
		       [101],
		       [102],
		       [103],
		       [104],
		       [105],
		       [106],
		       [107],
		       [108],
		       [109],
		       [110],
		       [111],
		       [112],
		       [113],
		       [114],
		       [115],
		       [116],
		       [117],
		       [118],
		       [119],
		       [120],
		       [121],
		       [122],
		       [123],
		       [124],
		       [125],
		       [126],
		       [127],
		       [128],
		       [129],
		       [130],
		       [131],
		       [132],
		       [133],
		       [134],
		       [135],
		       [136],
		       [137],
		       [138],
		       [139],
		       [140],
		       [141],
		       [142],
		       [143],
		       [144],
		       [145],
		       [146],
		       [147],
		       [148]])

Code cell <cUAqMWuRc_qT>
#%% [code]
world_cases
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		array([[    555],
		       [    654],
		       [    941],
		       [   1434],
		       [   2118],
		       [   2927],
		       [   5578],
		       [   6166],
		       [   8234],
		       [   9927],
		       [  12038],
		       [  16787],
		       [  19881],
		       [  23892],
		       [  27635],
		       [  30794],
		       [  34391],
		       [  37120],
		       [  40150],
		       [  42762],
		       [  44802],
		       [  45221],
		       [  60368],
		       [  66885],
		       [  69030],
		       [  71224],
		       [  73258],
		       [  75136],
		       [  75639],
		       [  76197],
		       [  76819],
		       [  78572],
		       [  78958],
		       [  79525],
		       [  80372],
		       [  81346],
		       [  82704],
		       [  84070],
		       [  85967],
		       [  88325],
		       [  90262],
		       [  92795],
		       [  95075],
		       [  97844],
		       [ 101761],
		       [ 105782],
		       [ 109754],
		       [ 113536],
		       [ 118375],
		       [ 125704],
		       [ 130909],
		       [ 145204],
		       [ 156283],
		       [ 167022],
		       [ 181452],
		       [ 196917],
		       [ 216161],
		       [ 243084],
		       [ 272698],
		       [ 304844],
		       [ 337597],
		       [ 378381],
		       [ 418569],
		       [ 468155],
		       [ 530138],
		       [ 594178],
		       [ 661544],
		       [ 720695],
		       [ 783580],
		       [ 858317],
		       [ 933905],
		       [1014713],
		       [1097193],
		       [1177447],
		       [1251123],
		       [1322598],
		       [1397537],
		       [1481490],
		       [1567423],
		       [1659674],
		       [1737813],
		       [1836615],
		       [1906692],
		       [1977287],
		       [2057584],
		       [2153578],
		       [2242537],
		       [2316073],
		       [2398423],
		       [2472264],
		       [2546905],
		       [2622750],
		       [2711635],
		       [2799064],
		       [2884420],
		       [2958352],
		       [3027215],
		       [3101078],
		       [3176596],
		       [3261450],
		       [3349915],
		       [3432050],
		       [3511157],
		       [3587874],
		       [3668635],
		       [3760836],
		       [3851895],
		       [3945002],
		       [4030363],
		       [4108270],
		       [4184838],
		       [4268247],
		       [4353211],
		       [4451126],
		       [4548549],
		       [4641727],
		       [4721968],
		       [4810315],
		       [4906193],
		       [5005761],
		       [5112366],
		       [5220585],
		       [5321022],
		       [5417354],
		       [5504324],
		       [5599216],
		       [5702113],
		       [5820253],
		       [5941938],
		       [6070884],
		       [6178860],
		       [6275246],
		       [6387849],
		       [6519164],
		       [6642853],
		       [6776126],
		       [6902650],
		       [7015739],
		       [7119355],
		       [7242692],
		       [7376333],
		       [7514724],
		       [7644260],
		       [7778881],
		       [7912426],
		       [8034461],
		       [8173940],
		       [8349950],
		       [8488976]])

Code cell <LWm4LP-2dEt7>
#%% [code]
total_deaths
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		array([[    17],
		       [    18],
		       [    26],
		       [    42],
		       [    56],
		       [    82],
		       [   131],
		       [   133],
		       [   171],
		       [   213],
		       [   259],
		       [   362],
		       [   426],
		       [   492],
		       [   564],
		       [   634],
		       [   719],
		       [   806],
		       [   906],
		       [  1013],
		       [  1113],
		       [  1118],
		       [  1371],
		       [  1523],
		       [  1666],
		       [  1770],
		       [  1868],
		       [  2007],
		       [  2122],
		       [  2247],
		       [  2251],
		       [  2458],
		       [  2469],
		       [  2629],
		       [  2708],
		       [  2770],
		       [  2814],
		       [  2872],
		       [  2941],
		       [  2996],
		       [  3085],
		       [  3160],
		       [  3254],
		       [  3347],
		       [  3459],
		       [  3558],
		       [  3801],
		       [  3987],
		       [  4263],
		       [  4610],
		       [  4913],
		       [  5411],
		       [  5831],
		       [  6471],
		       [  7151],
		       [  7957],
		       [  8852],
		       [  9958],
		       [ 11439],
		       [ 13141],
		       [ 14840],
		       [ 16758],
		       [ 19026],
		       [ 21799],
		       [ 24800],
		       [ 28308],
		       [ 31990],
		       [ 35456],
		       [ 39604],
		       [ 44440],
		       [ 49968],
		       [ 56251],
		       [ 62213],
		       [ 68044],
		       [ 73031],
		       [ 78862],
		       [ 86765],
		       [ 93457],
		       [101043],
		       [108286],
		       [114307],
		       [120007],
		       [125730],
		       [132621],
		       [140886],
		       [148157],
		       [157022],
		       [163452],
		       [167983],
		       [173381],
		       [180475],
		       [187174],
		       [193926],
		       [200266],
		       [206459],
		       [210192],
		       [214747],
		       [221109],
		       [227992],
		       [233687],
		       [238942],
		       [244129],
		       [247797],
		       [251890],
		       [257612],
		       [264196],
		       [269905],
		       [275250],
		       [279661],
		       [283086],
		       [286697],
		       [292319],
		       [297539],
		       [302813],
		       [307998],
		       [312150],
		       [315546],
		       [318853],
		       [323662],
		       [328483],
		       [333292],
		       [338585],
		       [342565],
		       [345412],
		       [346583],
		       [350807],
		       [355990],
		       [360686],
		       [365380],
		       [369492],
		       [372373],
		       [375902],
		       [380599],
		       [386298],
		       [391472],
		       [396294],
		       [400107],
		       [402856],
		       [406600],
		       [411461],
		       [416670],
		       [421461],
		       [425780],
		       [430047],
		       [433391],
		       [436899],
		       [443685],
		       [448959],
		       [453981]])

Code cell <7EsUXy5bdJMy>
#%% [code]
total_recovered
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		array([[     28],
		       [     30],
		       [     36],
		       [     39],
		       [     52],
		       [     61],
		       [    107],
		       [    126],
		       [    143],
		       [    222],
		       [    284],
		       [    472],
		       [    623],
		       [    852],
		       [   1124],
		       [   1487],
		       [   2011],
		       [   2616],
		       [   3244],
		       [   3946],
		       [   4683],
		       [   5150],
		       [   6295],
		       [   8058],
		       [   9395],
		       [  10865],
		       [  12583],
		       [  14352],
		       [  16121],
		       [  18177],
		       [  18890],
		       [  22886],
		       [  23394],
		       [  25227],
		       [  27905],
		       [  30384],
		       [  33277],
		       [  36711],
		       [  39782],
		       [  42716],
		       [  45602],
		       [  48228],
		       [  51170],
		       [  53796],
		       [  55865],
		       [  58359],
		       [  60694],
		       [  62493],
		       [  64404],
		       [  67002],
		       [  68323],
		       [  70250],
		       [  72621],
		       [  76031],
		       [  78085],
		       [  80837],
		       [  83320],
		       [  84957],
		       [  87402],
		       [  91666],
		       [  97881],
		       [  98346],
		       [ 107985],
		       [ 113768],
		       [ 122133],
		       [ 130902],
		       [ 139396],
		       [ 148863],
		       [ 164300],
		       [ 177786],
		       [ 192876],
		       [ 209917],
		       [ 225364],
		       [ 245777],
		       [ 259616],
		       [ 276249],
		       [ 299637],
		       [ 328353],
		       [ 353689],
		       [ 375508],
		       [ 401755],
		       [ 421158],
		       [ 448324],
		       [ 473417],
		       [ 510084],
		       [ 540912],
		       [ 567032],
		       [ 590955],
		       [ 622609],
		       [ 644611],
		       [ 679438],
		       [ 709867],
		       [ 738658],
		       [ 788691],
		       [ 816470],
		       [ 845073],
		       [ 872876],
		       [ 906142],
		       [ 948310],
		       [1013281],
		       [1051512],
		       [1092429],
		       [1124752],
		       [1158816],
		       [1195421],
		       [1241339],
		       [1280836],
		       [1317358],
		       [1370907],
		       [1404501],
		       [1451495],
		       [1488530],
		       [1544372],
		       [1584107],
		       [1632096],
		       [1688687],
		       [1729573],
		       [1782471],
		       [1834636],
		       [1893549],
		       [1944814],
		       [2053465],
		       [2108436],
		       [2163876],
		       [2227599],
		       [2282813],
		       [2346206],
		       [2413063],
		       [2490390],
		       [2560862],
		       [2637170],
		       [2692065],
		       [2796188],
		       [2875330],
		       [2945359],
		       [3014515],
		       [3086717],
		       [3141810],
		       [3293408],
		       [3375668],
		       [3454807],
		       [3540696],
		       [3620412],
		       [3706353],
		       [3777131],
		       [3857338],
		       [3955169],
		       [4073955],
		       [4155099]])

Code cell <V4fQUnLUdVgm>
#%% [code]
days_in_future = 10
future_forecast = np.array([i for i in range (len(dates)+days_in_future)]).reshape(-1,1)
adjust_dates = future_forecast[:-10]

Code cell <CIKsmutLeFBS>
#%% [code]
future_forecast
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		array([[  0],
		       [  1],
		       [  2],
		       [  3],
		       [  4],
		       [  5],
		       [  6],
		       [  7],
		       [  8],
		       [  9],
		       [ 10],
		       [ 11],
		       [ 12],
		       [ 13],
		       [ 14],
		       [ 15],
		       [ 16],
		       [ 17],
		       [ 18],
		       [ 19],
		       [ 20],
		       [ 21],
		       [ 22],
		       [ 23],
		       [ 24],
		       [ 25],
		       [ 26],
		       [ 27],
		       [ 28],
		       [ 29],
		       [ 30],
		       [ 31],
		       [ 32],
		       [ 33],
		       [ 34],
		       [ 35],
		       [ 36],
		       [ 37],
		       [ 38],
		       [ 39],
		       [ 40],
		       [ 41],
		       [ 42],
		       [ 43],
		       [ 44],
		       [ 45],
		       [ 46],
		       [ 47],
		       [ 48],
		       [ 49],
		       [ 50],
		       [ 51],
		       [ 52],
		       [ 53],
		       [ 54],
		       [ 55],
		       [ 56],
		       [ 57],
		       [ 58],
		       [ 59],
		       [ 60],
		       [ 61],
		       [ 62],
		       [ 63],
		       [ 64],
		       [ 65],
		       [ 66],
		       [ 67],
		       [ 68],
		       [ 69],
		       [ 70],
		       [ 71],
		       [ 72],
		       [ 73],
		       [ 74],
		       [ 75],
		       [ 76],
		       [ 77],
		       [ 78],
		       [ 79],
		       [ 80],
		       [ 81],
		       [ 82],
		       [ 83],
		       [ 84],
		       [ 85],
		       [ 86],
		       [ 87],
		       [ 88],
		       [ 89],
		       [ 90],
		       [ 91],
		       [ 92],
		       [ 93],
		       [ 94],
		       [ 95],
		       [ 96],
		       [ 97],
		       [ 98],
		       [ 99],
		       [100],
		       [101],
		       [102],
		       [103],
		       [104],
		       [105],
		       [106],
		       [107],
		       [108],
		       [109],
		       [110],
		       [111],
		       [112],
		       [113],
		       [114],
		       [115],
		       [116],
		       [117],
		       [118],
		       [119],
		       [120],
		       [121],
		       [122],
		       [123],
		       [124],
		       [125],
		       [126],
		       [127],
		       [128],
		       [129],
		       [130],
		       [131],
		       [132],
		       [133],
		       [134],
		       [135],
		       [136],
		       [137],
		       [138],
		       [139],
		       [140],
		       [141],
		       [142],
		       [143],
		       [144],
		       [145],
		       [146],
		       [147],
		       [148],
		       [149],
		       [150],
		       [151],
		       [152],
		       [153],
		       [154],
		       [155],
		       [156],
		       [157],
		       [158]])

Code cell <ZQp5I9M_eVRS>
#%% [code]
start = '1/22/2020'
start_date = datetime.datetime.strptime(start,'%m/%d/%Y')
future_forecast_dates =[]
for i in range(len(future_forecast)):
  future_forecast_dates.append((start_date + datetime.timedelta(days=1)).strftime('%m/%d/%y'))


Code cell <kXI2viFihPq1>
#%% [code]
latest_confirmed = outbreak_confirmed[dates[-1]]
latest_deaths = outbreak_deaths[dates[-1]]
latest_recoveries = outbreak_recovered[dates[-1]]

Code cell <ZIX0Ea9Sh_60>
#%% [code]
latest_confirmed
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		0      27532
		1       1788
		2      11385
		3        855
		4        166
		       ...  
		261      688
		262      909
		263      210
		264     5279
		265        4
		Name: 6/18/20, Length: 266, dtype: int64

Code cell <R13LedFEiMy7>
#%% [code]
latest_deaths
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		0      546
		1       39
		2      811
		3       52
		4        8
		      ... 
		261     12
		262    248
		263      5
		264     51
		265      0
		Name: 6/18/20, Length: 266, dtype: int64

Code cell <6pxOZac_iSk0>
#%% [code]
latest_recoveries
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		0      7660
		1      1086
		2      8078
		3       792
		4        64
		       ... 
		248     191
		249     273
		250     129
		251    3762
		252       2
		Name: 6/18/20, Length: 253, dtype: int64

Code cell <FBYuSMR2iYzy>
#%% [code]
unique_countries = list(outbreak_confirmed['Country/Region'].unique())
unique_countries
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		['Afghanistan',
		 'Albania',
		 'Algeria',
		 'Andorra',
		 'Angola',
		 'Antigua and Barbuda',
		 'Argentina',
		 'Armenia',
		 'Australia',
		 'Austria',
		 'Azerbaijan',
		 'Bahamas',
		 'Bahrain',
		 'Bangladesh',
		 'Barbados',
		 'Belarus',
		 'Belgium',
		 'Benin',
		 'Bhutan',
		 'Bolivia',
		 'Bosnia and Herzegovina',
		 'Brazil',
		 'Brunei',
		 'Bulgaria',
		 'Burkina Faso',
		 'Cabo Verde',
		 'Cambodia',
		 'Cameroon',
		 'Canada',
		 'Central African Republic',
		 'Chad',
		 'Chile',
		 'China',
		 'Colombia',
		 'Congo (Brazzaville)',
		 'Congo (Kinshasa)',
		 'Costa Rica',
		 "Cote d'Ivoire",
		 'Croatia',
		 'Diamond Princess',
		 'Cuba',
		 'Cyprus',
		 'Czechia',
		 'Denmark',
		 'Djibouti',
		 'Dominican Republic',
		 'Ecuador',
		 'Egypt',
		 'El Salvador',
		 'Equatorial Guinea',
		 'Eritrea',
		 'Estonia',
		 'Eswatini',
		 'Ethiopia',
		 'Fiji',
		 'Finland',
		 'France',
		 'Gabon',
		 'Gambia',
		 'Georgia',
		 'Germany',
		 'Ghana',
		 'Greece',
		 'Guatemala',
		 'Guinea',
		 'Guyana',
		 'Haiti',
		 'Holy See',
		 'Honduras',
		 'Hungary',
		 'Iceland',
		 'India',
		 'Indonesia',
		 'Iran',
		 'Iraq',
		 'Ireland',
		 'Israel',
		 'Italy',
		 'Jamaica',
		 'Japan',
		 'Jordan',
		 'Kazakhstan',
		 'Kenya',
		 'Korea, South',
		 'Kuwait',
		 'Kyrgyzstan',
		 'Latvia',
		 'Lebanon',
		 'Liberia',
		 'Liechtenstein',
		 'Lithuania',
		 'Luxembourg',
		 'Madagascar',
		 'Malaysia',
		 'Maldives',
		 'Malta',
		 'Mauritania',
		 'Mauritius',
		 'Mexico',
		 'Moldova',
		 'Monaco',
		 'Mongolia',
		 'Montenegro',
		 'Morocco',
		 'Namibia',
		 'Nepal',
		 'Netherlands',
		 'New Zealand',
		 'Nicaragua',
		 'Niger',
		 'Nigeria',
		 'North Macedonia',
		 'Norway',
		 'Oman',
		 'Pakistan',
		 'Panama',
		 'Papua New Guinea',
		 'Paraguay',
		 'Peru',
		 'Philippines',
		 'Poland',
		 'Portugal',
		 'Qatar',
		 'Romania',
		 'Russia',
		 'Rwanda',
		 'Saint Lucia',
		 'Saint Vincent and the Grenadines',
		 'San Marino',
		 'Saudi Arabia',
		 'Senegal',
		 'Serbia',
		 'Seychelles',
		 'Singapore',
		 'Slovakia',
		 'Slovenia',
		 'Somalia',
		 'South Africa',
		 'Spain',
		 'Sri Lanka',
		 'Sudan',
		 'Suriname',
		 'Sweden',
		 'Switzerland',
		 'Taiwan*',
		 'Tanzania',
		 'Thailand',
		 'Togo',
		 'Trinidad and Tobago',
		 'Tunisia',
		 'Turkey',
		 'Uganda',
		 'Ukraine',
		 'United Arab Emirates',
		 'United Kingdom',
		 'Uruguay',
		 'US',
		 'Uzbekistan',
		 'Venezuela',
		 'Vietnam',
		 'Zambia',
		 'Zimbabwe',
		 'Dominica',
		 'Grenada',
		 'Mozambique',
		 'Syria',
		 'Timor-Leste',
		 'Belize',
		 'Laos',
		 'Libya',
		 'West Bank and Gaza',
		 'Guinea-Bissau',
		 'Mali',
		 'Saint Kitts and Nevis',
		 'Kosovo',
		 'Burma',
		 'MS Zaandam',
		 'Botswana',
		 'Burundi',
		 'Sierra Leone',
		 'Malawi',
		 'South Sudan',
		 'Western Sahara',
		 'Sao Tome and Principe',
		 'Yemen',
		 'Comoros',
		 'Tajikistan',
		 'Lesotho']

Code cell <fHVyF0Pdi6AO>
#%% [code]
country_outbreak_confirmed = []
no_cases = []
for i in unique_countries:
  cases = latest_confirmed[outbreak_confirmed['Country/Region']==i].sum()
  if cases > 0:
    country_outbreak_confirmed.append(cases)
  else:
    no_cases.append(i)

for i in no_cases:
   unique_countries.remove(i)

unique_countries = [k for k,v in sorted(zip(unique_countries,country_outbreak_confirmed),key=operator.itemgetter(1),reverse=True)]
for i in range (len(unique_countries)):
  country_outbreak_confirmed[i]=latest_confirmed[outbreak_confirmed['Country/Region']==unique_countries[i]].sum()

Code cell <apIg4Pc2oUJ1>
#%% [code]
print('Outbreak Confirmed by Countries/Region:')
for i in range(len(unique_countries)):
  print(f'{unique_countries[i]}:{country_outbreak_confirmed[i]} cases')

Execution output from Jun 22, 2020 3:00 AM
	Stream
		Outbreak Confirmed by Countries/Region:
		US:2191052 cases
		Brazil:978142 cases
		Russia:560321 cases
		India:380532 cases
		United Kingdom:301935 cases
		Spain:245268 cases
		Peru:244388 cases
		Italy:238159 cases
		Chile:225103 cases
		Iran:197647 cases
		France:195272 cases
		Germany:189817 cases
		Turkey:184031 cases
		Mexico:165455 cases
		Pakistan:165062 cases
		Saudi Arabia:145991 cases
		Bangladesh:102292 cases
		Canada:101877 cases
		China:84494 cases
		Qatar:84441 cases
		South Africa:83890 cases
		Belgium:60348 cases
		Colombia:57202 cases
		Belarus:56657 cases
		Sweden:56043 cases
		Egypt:50437 cases
		Netherlands:49527 cases
		Ecuador:49097 cases
		United Arab Emirates:43752 cases
		Indonesia:42762 cases
		Singapore:41473 cases
		Portugal:38089 cases
		Kuwait:38074 cases
		Argentina:37510 cases
		Ukraine:34833 cases
		Switzerland:31200 cases
		Poland:31015 cases
		Philippines:27799 cases
		Afghanistan:27532 cases
		Oman:26818 cases
		Iraq:25717 cases
		Ireland:25355 cases
		Dominican Republic:24645 cases
		Panama:23351 cases
		Romania:23080 cases
		Bolivia:21499 cases
		Bahrain:20430 cases
		Israel:20036 cases
		Armenia:18698 cases
		Nigeria:18480 cases
		Japan:17588 cases
		Austria:17223 cases
		Kazakhstan:15877 cases
		Moldova:13106 cases
		Ghana:12929 cases
		Serbia:12616 cases
		Denmark:12544 cases
		Korea, South:12306 cases
		Guatemala:11868 cases
		Algeria:11385 cases
		Azerbaijan:11329 cases
		Honduras:10739 cases
		Czechia:10280 cases
		Cameroon:9864 cases
		Morocco:9074 cases
		Norway:8708 cases
		Malaysia:8529 cases
		Sudan:8020 cases
		Nepal:7848 cases
		Australia:7409 cases
		Finland:7119 cases
		Cote d'Ivoire:6444 cases
		Uzbekistan:5767 cases
		Senegal:5475 cases
		Congo (Kinshasa):5283 cases
		Tajikistan:5279 cases
		Haiti:4916 cases
		Guinea:4841 cases
		North Macedonia:4664 cases
		Djibouti:4557 cases
		Gabon:4340 cases
		Kenya:4257 cases
		El Salvador:4200 cases
		Luxembourg:4091 cases
		Hungary:4079 cases
		Ethiopia:3954 cases
		Bulgaria:3674 cases
		Venezuela:3483 cases
		Greece:3227 cases
		Bosnia and Herzegovina:3174 cases
		Thailand:3141 cases
		Somalia:2719 cases
		Kyrgyzstan:2657 cases
		Central African Republic:2605 cases
		Mauritania:2424 cases
		Cuba:2295 cases
		Croatia:2269 cases
		Maldives:2137 cases
		Estonia:1977 cases
		Sri Lanka:1947 cases
		Costa Rica:1939 cases
		Mali:1906 cases
		South Sudan:1830 cases
		Nicaragua:1823 cases
		Iceland:1816 cases
		Albania:1788 cases
		Lithuania:1784 cases
		Equatorial Guinea:1664 cases
		Slovakia:1562 cases
		Slovenia:1511 cases
		New Zealand:1507 cases
		Lebanon:1495 cases
		Guinea-Bissau:1492 cases
		Kosovo:1486 cases
		Zambia:1416 cases
		Madagascar:1403 cases
		Paraguay:1330 cases
		Sierra Leone:1272 cases
		Tunisia:1132 cases
		Latvia:1108 cases
		Niger:1020 cases
		Jordan:1001 cases
		Cyprus:985 cases
		Yemen:909 cases
		Burkina Faso:899 cases
		Georgia:893 cases
		Congo (Brazzaville):883 cases
		Andorra:855 cases
		Chad:854 cases
		Uruguay:850 cases
		Cabo Verde:823 cases
		Uganda:741 cases
		Diamond Princess:712 cases
		San Marino:696 cases
		Sao Tome and Principe:688 cases
		Malta:663 cases
		Mozambique:662 cases
		Rwanda:646 cases
		Jamaica:638 cases
		West Bank and Gaza:600 cases
		Benin:597 cases
		Malawi:592 cases
		Eswatini:586 cases
		Togo:547 cases
		Liberia:542 cases
		Libya:510 cases
		Tanzania:509 cases
		Zimbabwe:463 cases
		Taiwan*:446 cases
		Vietnam:342 cases
		Mauritius:337 cases
		Montenegro:337 cases
		Burma:286 cases
		Suriname:277 cases
		Comoros:210 cases
		Mongolia:204 cases
		Syria:187 cases
		Guyana:183 cases
		Angola:166 cases
		Eritrea:142 cases
		Brunei:141 cases
		Cambodia:129 cases
		Trinidad and Tobago:123 cases
		Bahamas:104 cases
		Burundi:104 cases
		Monaco:99 cases
		Barbados:97 cases
		Liechtenstein:82 cases
		Botswana:79 cases
		Bhutan:67 cases
		Namibia:39 cases
		Gambia:36 cases
		Saint Vincent and the Grenadines:29 cases
		Antigua and Barbuda:26 cases
		Timor-Leste:24 cases
		Grenada:23 cases
		Belize:22 cases
		Saint Lucia:19 cases
		Laos:19 cases
		Fiji:18 cases
		Dominica:18 cases
		Saint Kitts and Nevis:15 cases
		Holy See:12 cases
		Seychelles:11 cases
		MS Zaandam:9 cases
		Western Sahara:9 cases
		Papua New Guinea:8 cases
		Lesotho:4 cases

Code cell <70yw_FhytEyE>
#%% [code]
unique_provinces = list(outbreak_confirmed['Province/State'].unique())
unique_provinces
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		[nan,
		 'Australian Capital Territory',
		 'New South Wales',
		 'Northern Territory',
		 'Queensland',
		 'South Australia',
		 'Tasmania',
		 'Victoria',
		 'Western Australia',
		 'Alberta',
		 'British Columbia',
		 'Grand Princess',
		 'Manitoba',
		 'New Brunswick',
		 'Newfoundland and Labrador',
		 'Nova Scotia',
		 'Ontario',
		 'Prince Edward Island',
		 'Quebec',
		 'Saskatchewan',
		 'Anhui',
		 'Beijing',
		 'Chongqing',
		 'Fujian',
		 'Gansu',
		 'Guangdong',
		 'Guangxi',
		 'Guizhou',
		 'Hainan',
		 'Hebei',
		 'Heilongjiang',
		 'Henan',
		 'Hong Kong',
		 'Hubei',
		 'Hunan',
		 'Inner Mongolia',
		 'Jiangsu',
		 'Jiangxi',
		 'Jilin',
		 'Liaoning',
		 'Macau',
		 'Ningxia',
		 'Qinghai',
		 'Shaanxi',
		 'Shandong',
		 'Shanghai',
		 'Shanxi',
		 'Sichuan',
		 'Tianjin',
		 'Tibet',
		 'Xinjiang',
		 'Yunnan',
		 'Zhejiang',
		 'Faroe Islands',
		 'Greenland',
		 'French Guiana',
		 'French Polynesia',
		 'Guadeloupe',
		 'Mayotte',
		 'New Caledonia',
		 'Reunion',
		 'Saint Barthelemy',
		 'St Martin',
		 'Martinique',
		 'Aruba',
		 'Curacao',
		 'Sint Maarten',
		 'Bermuda',
		 'Cayman Islands',
		 'Channel Islands',
		 'Gibraltar',
		 'Isle of Man',
		 'Montserrat',
		 'Diamond Princess',
		 'Northwest Territories',
		 'Yukon',
		 'Anguilla',
		 'British Virgin Islands',
		 'Turks and Caicos Islands',
		 'Bonaire, Sint Eustatius and Saba',
		 'Falkland Islands (Malvinas)',
		 'Saint Pierre and Miquelon']

Code cell <tUJfUcxBvPQc>
#%% [code]
unique_provinces = list(outbreak_confirmed['Province/State'].unique())
outliers=['South Australia','Hong Kong']
for i in outliers:
     unique_provinces.remove(i)


Code cell <HNGlGGcpu_4Q>
#%% [code]
province_outbreak_confirmed = []
no_cases =[]
for i in unique_provinces:
  cases = latest_confirmed[outbreak_confirmed['Province/State']==i].sum()
  if cases > 0:
    province_outbreak_confirmed.append(cases)
  else:
    no_cases.append(i)

for i in no_cases:
   unique_provinces.remove(i)


Code cell <O4ObYP6jw11z>
#%% [code]
for i in range(len(unique_provinces)):
  print(f'{unique_provinces[i]}:{province_outbreak_confirmed[i]} cases')
Execution output from Jun 22, 2020 3:00 AM
	Stream
		Australian Capital Territory:108 cases
		New South Wales:3143 cases
		Northern Territory:29 cases
		Queensland:1066 cases
		Tasmania:228 cases
		Victoria:1792 cases
		Western Australia:603 cases
		Alberta:7579 cases
		British Columbia:2783 cases
		Grand Princess:13 cases
		Manitoba:308 cases
		New Brunswick:164 cases
		Newfoundland and Labrador:261 cases
		Nova Scotia:1061 cases
		Ontario:34574 cases
		Prince Edward Island:27 cases
		Quebec:54383 cases
		Saskatchewan:708 cases
		Anhui:991 cases
		Beijing:777 cases
		Chongqing:582 cases
		Fujian:362 cases
		Gansu:151 cases
		Guangdong:1631 cases
		Guangxi:254 cases
		Guizhou:147 cases
		Hainan:171 cases
		Hebei:340 cases
		Heilongjiang:947 cases
		Henan:1276 cases
		Hubei:68135 cases
		Hunan:1019 cases
		Inner Mongolia:238 cases
		Jiangsu:653 cases
		Jiangxi:932 cases
		Jilin:155 cases
		Liaoning:153 cases
		Macau:45 cases
		Ningxia:75 cases
		Qinghai:18 cases
		Shaanxi:314 cases
		Shandong:792 cases
		Shanghai:697 cases
		Shanxi:198 cases
		Sichuan:589 cases
		Tianjin:197 cases
		Tibet:1 cases
		Xinjiang:76 cases
		Yunnan:185 cases
		Zhejiang:1269 cases
		Faroe Islands:187 cases
		Greenland:13 cases
		French Guiana:1758 cases
		French Polynesia:60 cases
		Guadeloupe:171 cases
		Mayotte:2383 cases
		New Caledonia:21 cases
		Reunion:502 cases
		Saint Barthelemy:6 cases
		St Martin:42 cases
		Martinique:221 cases
		Aruba:101 cases
		Curacao:23 cases
		Sint Maarten:77 cases
		Bermuda:144 cases
		Cayman Islands:193 cases
		Channel Islands:570 cases
		Gibraltar:176 cases
		Isle of Man:336 cases
		Montserrat:11 cases
		Northwest Territories:5 cases
		Yukon:11 cases
		Anguilla:3 cases
		British Virgin Islands:8 cases
		Turks and Caicos Islands:12 cases
		Bonaire, Sint Eustatius and Saba:7 cases
		Falkland Islands (Malvinas):13 cases
		Saint Pierre and Miquelon:1 cases

Code cell <GqkZdObLxfzU>
#%% [code]
nan_indices = []

for i in range (len(unique_provinces)):
  if type (unique_provinces[i])== float:
    nan_indices.append(i)

unique_provinces = list(unique_provinces)
province_outbreak_confirmed = list(province_outbreak_confirmed)

for i in nan_indices:
  unique_provinces.pop(i)
  province_outbreak_confirmed.pop(i)


Code cell <nlFcOv5PzuSS>
#%% [code]
plt.figure(figsize=(32,32))
plt.barh(unique_countries,country_outbreak_confirmed)
plt.xlabel('NUMBER OF COVID 19 CONFIRMED CASES')
plt.title('NUMBER OF COVID 19 CONFIRMED CASES IN COUNTRIES')
plt.show()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		<Figure size 2304x2304 with 1 Axes>

Code cell <pxgdk4iz1qQb>
#%% [code]
china_confirmed = latest_confirmed[outbreak_confirmed['Country/Region']=='China'].sum()
outside_mainland_china_confirmed = np.sum(country_outbreak_confirmed)- china_confirmed
plt.figure(figsize=(16,9))
plt.barh('Mainland China',china_confirmed)
plt.barh('Outside Mainland China',outside_mainland_china_confirmed)

plt.title('NUMBER OF COVID 19 CONFIRMED CASES')
plt.show()


Execution output from Jun 22, 2020 3:00 AM
	text/plain
		<Figure size 1152x648 with 1 Axes>

Code cell <FqNmCqN55ELq>
#%% [code]
print('Outside Mainland China {} cases'.format(outside_mainland_china_confirmed))
print(' Mainland China {} cases'.format(china_confirmed))
print('Total {} cases'.format(china_confirmed+outside_mainland_china_confirmed))
Execution output from Jun 22, 2020 3:00 AM
	Stream
		Outside Mainland China 8404482 cases
		 Mainland China 84494 cases
		Total 8488976 cases

Code cell <awQcKm-M7eGu>
#%% [code]
visual_unique_countries = []
visual_outbreak_confirmed = []
others = np.sum(country_outbreak_confirmed[10:])
for i in range (len(country_outbreak_confirmed[10:])):
  visual_unique_countries.append(unique_countries[i])
  visual_outbreak_confirmed.append(country_outbreak_confirmed[i])

visual_unique_countries.append('Others')
visual_outbreak_confirmed.append(others)

Code cell <q0oqBpPN9PsI>
#%% [code]
plt.figure(figsize=(32,18))
plt.barh(visual_unique_countries,visual_outbreak_confirmed)
plt.title('NUMBER OF COVID 19 CONFIRMED CASES in countries/region', size = 20)
plt.show()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		<Figure size 2304x1296 with 1 Axes>

Code cell <3RnC0DWq-Mn8>
#%% [code]
c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))
plt.figure(figsize=(20,20))
plt.title('NUMBER OF COVID 19 CONFIRMED CASES PER COUNTRY')
plt.pie(visual_outbreak_confirmed, colors=c)
plt.legend(visual_unique_countries, loc='best')


plt.show()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		<Figure size 1440x1440 with 1 Axes>

Code cell <PyT4z4DLEeq_>
#%% [code]
c = random.choices(list(mcolors.CSS4_COLORS.values()),k = len(unique_countries))
plt.figure(figsize=(20,20))
plt.title('NUMBER OF COVID 19 CONFIRMED CASES PER COUNTRY')
plt.pie(visual_outbreak_confirmed[1:], colors=c)
plt.legend(visual_unique_countries[1:], loc='best')


plt.show()
Execution output from Jun 22, 2020 3:00 AM
	text/plain
		<Figure size 1440x1440 with 1 Axes>

Code cell <wtjDZp8xxEtp>
#%% [code]
kernel = ['poly','sigmoid','rbf']
c = [0.01,0.1,1 , 10]
gamma = [0.01,0.1,1 ]
epsilon = [0.01,0.1,1 ]
shrinking = [True , False]
svm_grid = {'kernel': kernel, 'C': c, 'gamma': gamma, 'epsilon': epsilon, 'shrinking': shrinking}

svm = SVR()
svm_search=RandomizedSearchCV(svm, svm_grid, scoring="neg_mean_squared_error", cv=3, return_train_score=True, n_jobs=-1, n_iter=40, verbose=1)
x_train_confirmed,x_test_confirmed,y_train_confirmed,y_test_confirmed = train_test_split(days_since_1_22,world_cases,test_size = 0.15,shuffle=False)
svm_search.fit(x_train_confirmed, y_train_confirmed)
Execution output from Jun 22, 2020 3:11 AM
	Stream
		Fitting 3 folds for each of 40 candidates, totalling 120 fits
		[Parallel(n_jobs=-1)]: Using backend LokyBackend with 2 concurrent workers.
		[Parallel(n_jobs=-1)]: Done  49 tasks      | elapsed:  7.2min
		[Parallel(n_jobs=-1)]: Done 120 out of 120 | elapsed: 11.5min finished
		/usr/local/lib/python3.6/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().
		  y = column_or_1d(y, warn=True)
	text/plain
		RandomizedSearchCV(cv=3, error_score=nan,
		                   estimator=SVR(C=1.0, cache_size=200, coef0=0.0, degree=3,
		                                 epsilon=0.1, gamma='scale', kernel='rbf',
		                                 max_iter=-1, shrinking=True, tol=0.001,
		                                 verbose=False),
		                   iid='deprecated', n_iter=40, n_jobs=-1,
		                   param_distributions={'C': [0.01, 0.1, 1, 10],
		                                        'epsilon': [0.01, 0.1, 1],
		                                        'gamma': [0.01, 0.1, 1],
		                                        'kernel': ['poly', 'sigmoid', 'rbf'],
		                                        'shrinking': [True, False]},
		                   pre_dispatch='2*n_jobs', random_state=None, refit=True,
		                   return_train_score=True, scoring='neg_mean_squared_error',
		                   verbose=1)

Code cell <jrCaHr9XyPAp>
#%% [code]
svm_search.best_params_
Execution output from Jun 22, 2020 3:11 AM
	text/plain
		{'C': 10, 'epsilon': 0.01, 'gamma': 0.1, 'kernel': 'poly', 'shrinking': False}

Code cell <chv4F3OeyY8I>
#%% [code]
svm_confirmed = svm_search.best_estimator_
svm_pred = svm_confirmed.predict(future_forecast)

Code cell <pzR3ahY0y5f3>
#%% [code]
svm_confirmed
Execution output from Jun 22, 2020 3:11 AM
	text/plain
		SVR(C=10, cache_size=200, coef0=0.0, degree=3, epsilon=0.01, gamma=0.1,
		    kernel='poly', max_iter=-1, shrinking=False, tol=0.001, verbose=False)

Code cell <0uwRCSBcy-HW>
#%% [code]
svm_pred
Execution output from Jun 22, 2020 3:11 AM
	text/plain
		array([9.16049912e+02, 9.19169641e+02, 9.41007742e+02, 1.00028259e+03,
		       1.11571255e+03, 1.30601600e+03, 1.58991132e+03, 1.98611687e+03,
		       2.51335102e+03, 3.19033216e+03, 4.03577865e+03, 5.06840886e+03,
		       6.30694117e+03, 7.77009394e+03, 9.47658556e+03, 1.14451344e+04,
		       1.36944588e+04, 1.62432772e+04, 1.91103079e+04, 2.23142693e+04,
		       2.58738798e+04, 2.98078577e+04, 3.41349215e+04, 3.88737894e+04,
		       4.40431799e+04, 4.96618114e+04, 5.57484022e+04, 6.23216706e+04,
		       6.94003351e+04, 7.70031140e+04, 8.51487258e+04, 9.38558887e+04,
		       1.03143321e+05, 1.13029741e+05, 1.23533868e+05, 1.34674419e+05,
		       1.46470114e+05, 1.58939670e+05, 1.72101805e+05, 1.85975239e+05,
		       2.00578689e+05, 2.15930874e+05, 2.32050512e+05, 2.48956322e+05,
		       2.66667022e+05, 2.85201331e+05, 3.04577966e+05, 3.24815646e+05,
		       3.45933090e+05, 3.67949016e+05, 3.90882142e+05, 4.14751186e+05,
		       4.39574868e+05, 4.65371905e+05, 4.92161015e+05, 5.19960918e+05,
		       5.48790331e+05, 5.78667974e+05, 6.09612563e+05, 6.41642818e+05,
		       6.74777457e+05, 7.09035198e+05, 7.44434760e+05, 7.80994861e+05,
		       8.18734219e+05, 8.57671554e+05, 8.97825582e+05, 9.39215023e+05,
		       9.81858595e+05, 1.02577502e+06, 1.07098301e+06, 1.11750128e+06,
		       1.16534856e+06, 1.21454356e+06, 1.26510501e+06, 1.31705161e+06,
		       1.37040209e+06, 1.42517517e+06, 1.48138956e+06, 1.53906399e+06,
		       1.59821716e+06, 1.65886781e+06, 1.72103464e+06, 1.78473638e+06,
		       1.84999175e+06, 1.91681946e+06, 1.98523823e+06, 2.05526678e+06,
		       2.12692383e+06, 2.20022810e+06, 2.27519830e+06, 2.35185315e+06,
		       2.43021138e+06, 2.51029170e+06, 2.59211282e+06, 2.67569347e+06,
		       2.76105237e+06, 2.84820823e+06, 2.93717978e+06, 3.02798572e+06,
		       3.12064478e+06, 3.21517569e+06, 3.31159714e+06, 3.40992787e+06,
		       3.51018659e+06, 3.61239203e+06, 3.71656289e+06, 3.82271790e+06,
		       3.93087577e+06, 4.04105523e+06, 4.15327500e+06, 4.26755378e+06,
		       4.38391030e+06, 4.50236328e+06, 4.62293144e+06, 4.74563349e+06,
		       4.87048815e+06, 4.99751415e+06, 5.12673019e+06, 5.25815500e+06,
		       5.39180730e+06, 5.52770581e+06, 5.66586923e+06, 5.80631630e+06,
		       5.94906573e+06, 6.09413623e+06, 6.24154654e+06, 6.39131535e+06,
		       6.54346141e+06, 6.69800341e+06, 6.85496008e+06, 7.01435014e+06,
		       7.17619231e+06, 7.34050530e+06, 7.50730784e+06, 7.67661864e+06,
		       7.84845641e+06, 8.02283989e+06, 8.19978779e+06, 8.37931881e+06,
		       8.56145170e+06, 8.74620515e+06, 8.93359790e+06, 9.12364865e+06,
		       9.31637614e+06, 9.51179906e+06, 9.70993616e+06, 9.91080613e+06,
		       1.01144277e+07, 1.03208196e+07, 1.05300005e+07, 1.07419892e+07,
		       1.09568044e+07, 1.11744647e+07, 1.13949890e+07, 1.16183959e+07,
		       1.18447041e+07, 1.20739324e+07, 1.23060995e+07])

Code cell <71bkw_yDzG8X>
#%% [code]
svm_test_pred = svm_confirmed.predict(x_test_confirmed)
plt.plot(svm_test_pred)
plt.plot(y_test_confirmed)
print('MAE' , mean_absolute_error(svm_test_pred,y_test_confirmed))
print('MSE' , mean_squared_error(svm_test_pred,y_test_confirmed))

Execution output from Jun 22, 2020 3:11 AM
	Stream
		MAE 1041445.1961313494
		MSE 1199174216315.5227
	text/plain
		<Figure size 432x288 with 1 Axes>

Code cell <rwnhOdET1Dc5>
#%% [code]

plt.figure(figsize=(20,12))
plt.plot(adjust_dates, world_cases)
plt.title('NUMBER OF CORONA CASES OVER TIME', size = 30)
plt.xlabel('Days since 1/22/2020', size = 30)
plt.ylabel('No of cases', size = 30)
plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:11 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <itUycjO23K7X>
#%% [code]
plt.figure(figsize=(20,12))
plt.plot(adjust_dates, world_cases)
plt.plot(future_forecast, svm_pred,linestyle='dashed', color = 'purple')
plt.title('NUMBER OF CORONA CASES OVER TIME', size = 30)
plt.xlabel('Days since 1/22/2020', size = 30)
plt.ylabel('No of cases', size = 30)
plt.legend(['Confirmed cases' ,'SVM predictions'])

plt.xticks(size =15)
plt.yticks(size =15)
plt.show()

Execution output from Jun 22, 2020 3:11 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <SVnoujXh4f36>
#%% [code]
print('SVM future predictions:')
set(zip(future_forecast_dates[-10:], svm_pred[-10:]))
Execution output from Jun 22, 2020 3:11 AM
	Stream
		SVM future predictions:
	text/plain
		{('01/23/20', 10320819.598320853),
		 ('01/23/20', 10530000.529648673),
		 ('01/23/20', 10741989.217163932),
		 ('01/23/20', 10956804.37846459),
		 ('01/23/20', 11174464.732376944),
		 ('01/23/20', 11394988.997818839),
		 ('01/23/20', 11618395.89207543),
		 ('01/23/20', 11844704.13440026),
		 ('01/23/20', 12073932.44235314),
		 ('01/23/20', 12306099.53535546)}

Code cell <moza8FntefyA>
#%% [code]
from sklearn.linear_model import LinearRegression
linear_model = LinearRegression(normalize=True ,fit_intercept=True)
linear_model.fit(x_train_confirmed,y_train_confirmed)
test_linear_pred = linear_model.predict(x_test_confirmed)
linear_pred = linear_model.predict(future_forecast)
print('MAE' , mean_absolute_error(test_linear_pred,y_test_confirmed))
print('MSE' , mean_squared_error(test_linear_pred,y_test_confirmed))

Execution output from Jun 22, 2020 3:16 AM
	Stream
		MAE 2235987.115849431
		MSE 5287207967769.846

Code cell <j5HPsv3vgHuE>
#%% [code]
plt.plot(y_test_confirmed)
plt.plot(test_linear_pred)
Execution output from Jun 22, 2020 3:16 AM
	text/plain
		[<matplotlib.lines.Line2D at 0x7f7468893d30>]
		<Figure size 432x288 with 1 Axes>

Code cell <GGmEmKZNgZ5v>
#%% [code]
plt.figure(figsize=(20,12))
plt.plot(adjust_dates, world_cases)
plt.plot(future_forecast,linear_pred ,linestyle='dashed', color = 'purple')
plt.title('NUMBER OF CORONA CASES OVER TIME', size = 30)
plt.xlabel('Days since 1/22/2020', size = 30)
plt.ylabel('No of cases', size = 30)
plt.legend(['Confirmed cases' ,'Linear Regression Predictions'])

plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:17 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <2-vEKgrjiJLK>
#%% [code]
print('Linear regression future predictions:')
print(linear_pred[-10:])
Execution output from Jun 22, 2020 3:19 AM
	Stream
		Linear regression future predictions:
		[[5333637.68815898]
		 [5377955.43269591]
		 [5422273.17723285]
		 [5466590.92176978]
		 [5510908.66630671]
		 [5555226.41084365]
		 [5599544.15538058]
		 [5643861.89991751]
		 [5688179.64445444]
		 [5732497.38899138]]

Code cell <SDbz-3vZik0X>
#%% [code]
plt.figure(figsize=(20,12))
plt.plot(adjust_dates, total_deaths, color = 'red')
plt.title('NUMBER OF CORONA CASES OVER TIME', size = 30)
plt.xlabel('Time', size = 30)
plt.ylabel('No of deaths', size = 30)
plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:22 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <EbKUal69jg9A>
#%% [code]
mean_mortality_rate =np.mean(mortality_rate)
plt.figure(figsize=(20,12))
plt.plot(adjust_dates,mortality_rate, color = 'orange')
plt.axhline(y = mean_mortality_rate ,linestyle='--', color = 'black')
plt.title('MORTALITY RATE OF CORONA CASES OVER TIME', size = 30)
plt.xlabel('Time', size = 30)
plt.ylabel('No of cases', size = 30)
plt.legend(['Mortality  rate' ,'y ='+str( mean_mortality_rate)])

plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:30 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <rIP9pmtHlO2q>
#%% [code]
plt.figure(figsize=(20,12))
plt.plot(adjust_dates, total_recovered, color = 'green')
plt.title('NUMBER OF CORONA CASES OVER TIME', size = 30)
plt.xlabel('Time', size = 30)
plt.ylabel('No of deaths', size = 30)
plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:39 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <PAuQxJnklhn1>
#%% [code]
plt.figure(figsize=(20,12))
plt.plot(adjust_dates,total_deaths, color = 'red')
plt.plot(adjust_dates,total_recovered, color = 'green')
plt.title(' CORONA CASES OVER TIME', size = 30)
plt.xlabel('Time', size = 30)
plt.ylabel('No of cases', size = 30)
plt.legend(['deaths','recoveries'], loc='best', fontsize=30)

plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:40 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>

Code cell <699ewZjZmnp5>
#%% [code]
plt.figure(figsize=(20,12))
plt.plot(total_deaths, total_recovered)
plt.title('CORONA VIRUS DEATHS VS RECOVERED', size = 30)
plt.xlabel('Total no of coronavirus deaths', size = 30)
plt.ylabel('Total no of coronavirus recovered', size = 30)
plt.xticks(size =15)
plt.yticks(size =15)
plt.show()
Execution output from Jun 22, 2020 3:40 AM
	text/plain
		<Figure size 1440x864 with 1 Axes>


